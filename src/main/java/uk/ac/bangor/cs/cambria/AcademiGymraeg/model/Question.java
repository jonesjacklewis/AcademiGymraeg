package uk.ac.bangor.cs.cambria.AcademiGymraeg.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import uk.ac.bangor.cs.cambria.AcademiGymraeg.QuestionConstruction;
import uk.ac.bangor.cs.cambria.AcademiGymraeg.enums.QuestionType;
import uk.ac.bangor.cs.cambria.AcademiGymraeg.questionConstruction.EnglishQuestionImpl;
import uk.ac.bangor.cs.cambria.AcademiGymraeg.questionConstruction.GenderQuestionImpl;
import uk.ac.bangor.cs.cambria.AcademiGymraeg.questionConstruction.WelshQuestionImpl;

/**
 * @author dwp22pzv
 */

@Entity

public class Question {

	public Question() {

	}

	public Question(  @NotBlank Noun noun, @NotBlank QuestionType questionType,  Test test) {
		this.noun = noun;
		this.questionType = questionType;
		this.test = test;

		generateQuestion();
	}
	
	private void generateQuestion(){

		QuestionConstruction questionConstructor;

            switch (this.questionType){
                case WELSH_TO_ENGLISH ->  {
                     questionConstructor = new EnglishQuestionImpl();
                     this.correctAnswer = noun.getEnglishNoun();
                    }
                case ENGLISH_TO_WELSH ->  {
                    questionConstructor = new WelshQuestionImpl();
                    this.correctAnswer = noun.getWelshNoun();
                }
                case GENDER ->  {
                     questionConstructor = new GenderQuestionImpl();
                     this.correctAnswer = noun.getGender().name();
                    }
                default -> {
                     throw new IllegalArgumentException("Unrecognised question type " + this.questionType);
                    }
            }

		this.questionString = questionConstructor.constructQuestion(this.noun.toString());
	}

	public Boolean checkAnswer(){
		if (this.givenAnswer.isEmpty() || this.givenAnswer.isBlank()){
			return false;
		}

		String sanitisedCorrectAnswer = this.correctAnswer.toLowerCase().trim();
		String sanitisedGivenAnswer = this.givenAnswer.toLowerCase().trim();

		return sanitisedGivenAnswer.equals(sanitisedCorrectAnswer);
	}

	/**
	 * Id attribute. The unique identifier for each Question object, and the primary
	 * key for the Question TABLE in the database. The value will be autogenerated,
	 * and cannot be updated once created.
	 */
	@Id
	@GeneratedValue
	@Column(nullable = false, updatable = false)
	@NotBlank
	private Long questionId;

	/**
	 * Question attribute. The string containing the actual question being asked.
	 */
	@Column(nullable = false)
	@NotBlank
	private String questionString;

	/**
	 * Noun attribute, the Noun object used by the question.
	 */
	@JoinColumn(nullable = false)
	@NotBlank
	@ManyToOne
	private Noun noun;

	/**
	 * QuestionType attribute. Represents the type of this question, either English
	 * to Welsh, Welsh to English, or Gender.
	 */
	@Column(nullable = false)
	@NotBlank
	private QuestionType questionType;

	/**
	 * correctAnswer attribute. The string containing the correct answer to the
	 * question.
	 */
	@Column(nullable = false)
	@NotBlank
	private String correctAnswer;

	/**
	 * givenAnswer attribute. The string containing the answer provided by the user
	 */
	private String givenAnswer;

	@ManyToOne
	@NotNull
	@JoinColumn(nullable = false, updatable = false)
	private Test test;

	@Override
	public String toString() {
		return questionString;
	}
    public Long getQuestionId() {
        return questionId;
    }

    public Long getId() {
        return id;
    }

    public String getQuestionString() {
        return questionString;
    }

    public Noun getNoun() {
        return noun;
    }

    public QuestionType getQuestionType() {
        return questionType;
    }

    public String getCorrectAnswer() {
        return correctAnswer;
    }

    public String getGivenAnswer() {
        return givenAnswer;
    }

    public Test getTest() {
        return test;
    }

    public void setGivenAnswer(String givenAnswer) {
        this.givenAnswer = givenAnswer;
    }



}
